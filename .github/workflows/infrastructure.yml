name: Infrastructure CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: [ 'infrastructure/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'infrastructure/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.6.0

jobs:
  # =============================================================================
  # Plan Job - Always runs on PR and push
  # =============================================================================
  plan:
    name: Plan Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive infrastructure/terraform

    - name: Terraform Init
      run: terraform init
      working-directory: infrastructure/terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: infrastructure/terraform

    - name: Terraform Plan
      run: terraform plan -var-file="environments/${{ github.ref_name == 'main' && 'prod' || 'dev' }}.tfvars"
      working-directory: infrastructure/terraform

  # =============================================================================
  # Apply Job - Runs on push to main or manual trigger
  # =============================================================================
  apply:
    name: Apply Infrastructure
    runs-on: ubuntu-latest
    needs: plan
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: infrastructure/terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve -var-file="environments/${{ github.event.inputs.environment || (github.ref_name == 'main' && 'prod' || 'dev') }}.tfvars"
      working-directory: infrastructure/terraform

    - name: Output Infrastructure Info
      run: terraform output
      working-directory: infrastructure/terraform

  # =============================================================================
  # Destroy Job - Manual trigger only
  # =============================================================================
  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: infrastructure/terraform

    - name: Terraform Destroy
      run: terraform destroy -auto-approve -var-file="environments/${{ github.event.inputs.environment }}.tfvars"
      working-directory: infrastructure/terraform

  # =============================================================================
  # Security Scan Job
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

