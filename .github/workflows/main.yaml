name: Main Branch CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy infrastructure'
        required: false
        default: true
        type: boolean
      deploy_application:
        description: 'Deploy application'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # Infrastructure Deployment Job
  # =============================================================================
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_infrastructure != false
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: infrastructure/terraform

    - name: Terraform Plan
      run: terraform plan -var-file="environments/prod.tfvars"
      working-directory: infrastructure/terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve -var-file="environments/prod.tfvars"
      working-directory: infrastructure/terraform

    - name: Output Infrastructure Info
      run: terraform output
      working-directory: infrastructure/terraform

  # =============================================================================
  # Application Deployment Job
  # =============================================================================
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.event.inputs.deploy_application != false
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
          backend/package-lock.json

    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm install
        fi
        if [ -f frontend/package.json ]; then
          cd frontend && npm install && cd ..
        fi
        if [ -f backend/package.json ]; then
          cd backend && npm install && cd ..
        fi

    - name: Run tests
      run: |
        if [ -f package.json ]; then
          npm test || echo "No test script found"
        fi
        if [ -f frontend/package.json ]; then
          cd frontend && npm test || echo "No test script found" && cd ..
        fi
        if [ -f backend/package.json ]; then
          cd backend && npm test || echo "No test script found" && cd ..
        fi

    - name: Build applications
      run: |
        if [ -f frontend/package.json ]; then
          cd frontend && npm run build || echo "No build script found" && cd ..
        fi
        if [ -f backend/package.json ]; then
          cd backend && npm run build || echo "No build script found" && cd ..
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push frontend image
      if: ${{ hashFiles('frontend/**') != '' }}
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}-frontend:latest
          ghcr.io/${{ github.repository }}-frontend:prod-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push backend image
      if: ${{ hashFiles('backend/**') != '' }}
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}-backend:latest
          ghcr.io/${{ github.repository }}-backend:prod-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Configure AWS credentials for deployment
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name code-quest-prod

    - name: Deploy to Kubernetes
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace code-quest-prod --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy frontend
        if [ -f frontend/k8s/deployment.yaml ]; then
          kubectl apply -f frontend/k8s/ -n code-quest-prod
        else
          echo "No Kubernetes manifests found for frontend"
        fi
        
        # Deploy backend
        if [ -f backend/k8s/deployment.yaml ]; then
          kubectl apply -f backend/k8s/ -n code-quest-prod
        else
          echo "No Kubernetes manifests found for backend"
        fi

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/frontend -n code-quest-prod --timeout=600s || echo "Frontend deployment not found"
        kubectl rollout status deployment/backend -n code-quest-prod --timeout=600s || echo "Backend deployment not found"

    - name: Get deployment status
      run: |
        echo "=== Production Deployment Status ==="
        kubectl get pods -n code-quest-prod
        kubectl get services -n code-quest-prod
        kubectl get ingress -n code-quest-prod

  # =============================================================================
  # Security Scan Job
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Notification Job
  # =============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Notify deployment status
      run: |
        echo "=== Deployment Summary ==="
        echo "Infrastructure: ${{ needs.deploy-infrastructure.result }}"
        echo "Application: ${{ needs.deploy-application.result }}"
        
        if [ "${{ needs.deploy-infrastructure.result }}" == "success" ] && [ "${{ needs.deploy-application.result }}" == "success" ]; then
          echo "‚úÖ Full production deployment successful!"
          echo "üöÄ Infrastructure and application are now live"
        else
          echo "‚ùå Deployment had issues!"
          echo "üîç Check the logs for more details"
        fi

