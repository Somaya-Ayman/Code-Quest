name: Production Application CI/CD

on:
  push:
    branches: [ main ]
    paths: 
      - 'frontend/**'
      - 'backend/**'
      - 'package.json'
      - 'docker-compose.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback
        - test

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Pre-deployment Tests Job
  # =============================================================================
  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        fi
        if [ -f frontend/package.json ]; then
          cd frontend && npm ci && cd ..
        fi
        if [ -f backend/package.json ]; then
          cd backend && npm ci && cd ..
        fi

    - name: Run comprehensive tests
      run: |
        echo "Running production readiness tests..."
        if [ -f package.json ]; then
          npm run test:prod || echo "No production test script found"
        fi
        if [ -f frontend/package.json ]; then
          cd frontend && npm run test:prod || echo "No production test script found" && cd ..
        fi
        if [ -f backend/package.json ]; then
          cd backend && npm run test:prod || echo "No production test script found" && cd ..
        fi

    - name: Security audit
      run: |
        if [ -f package.json ]; then
          npm audit --audit-level=moderate || echo "Audit issues found"
        fi
        if [ -f frontend/package.json ]; then
          cd frontend && npm audit --audit-level=moderate || echo "Audit issues found" && cd ..
        fi
        if [ -f backend/package.json ]; then
          cd backend && npm audit --audit-level=moderate || echo "Audit issues found" && cd ..
        fi

  # =============================================================================
  # Build Production Docker Images Job
  # =============================================================================
  build-production-images:
    name: Build Production Docker Images
    runs-on: ubuntu-latest
    needs: pre-deployment-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=sha,prefix=prod-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable={{is_default_branch}}

    - name: Build and push frontend image
      if: ${{ hashFiles('frontend/**') != '' }}
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:prod-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:stable
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push backend image
      if: ${{ hashFiles('backend/**') != '' }}
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:prod-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:stable
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # =============================================================================
  # Deploy to Production Job
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-tests, build-production-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-east-1 --name code-quest-prod

    - name: Create namespace
      run: |
        kubectl create namespace code-quest-prod --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy with blue-green strategy
      run: |
        # Deploy frontend
        if [ -f frontend/k8s/deployment.yaml ]; then
          # Update image tag in deployment
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:prod-${{ github.sha }}|g" frontend/k8s/deployment.yaml
          kubectl apply -f frontend/k8s/ -n code-quest-prod
        else
          echo "No Kubernetes manifests found for frontend"
        fi
        
        # Deploy backend
        if [ -f backend/k8s/deployment.yaml ]; then
          # Update image tag in deployment
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:prod-${{ github.sha }}|g" backend/k8s/deployment.yaml
          kubectl apply -f backend/k8s/ -n code-quest-prod
        else
          echo "No Kubernetes manifests found for backend"
        fi

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/frontend -n code-quest-prod --timeout=600s || echo "Frontend deployment not found"
        kubectl rollout status deployment/backend -n code-quest-prod --timeout=600s || echo "Backend deployment not found"

    - name: Health check
      run: |
        echo "=== Production Health Check ==="
        kubectl get pods -n code-quest-prod
        kubectl get services -n code-quest-prod
        kubectl get ingress -n code-quest-prod
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=frontend -n code-quest-prod --timeout=300s || echo "Frontend pods not ready"
        kubectl wait --for=condition=ready pod -l app=backend -n code-quest-prod --timeout=300s || echo "Backend pods not ready"

    - name: Run smoke tests
      run: |
        echo "Running production smoke tests..."
        # Get service endpoints
        FRONTEND_URL=$(kubectl get service frontend -n code-quest-prod -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "localhost:3000")
        BACKEND_URL=$(kubectl get service backend -n code-quest-prod -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "localhost:3001")
        
        echo "Frontend URL: $FRONTEND_URL"
        echo "Backend URL: $BACKEND_URL"
        
        # Basic connectivity tests
        curl -f $FRONTEND_URL || echo "Frontend health check failed"
        curl -f $BACKEND_URL/health || echo "Backend health check failed"

  # =============================================================================
  # Rollback Job (Manual trigger only)
  # =============================================================================
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-east-1 --name code-quest-prod

    - name: Rollback deployments
      run: |
        echo "Rolling back to previous version..."
        kubectl rollout undo deployment/frontend -n code-quest-prod || echo "Frontend rollback failed"
        kubectl rollout undo deployment/backend -n code-quest-prod || echo "Backend rollback failed"
        
        # Wait for rollback to complete
        kubectl rollout status deployment/frontend -n code-quest-prod --timeout=300s || echo "Frontend rollback status check failed"
        kubectl rollout status deployment/backend -n code-quest-prod --timeout=300s || echo "Backend rollback status check failed"

    - name: Verify rollback
      run: |
        echo "=== Rollback Verification ==="
        kubectl get pods -n code-quest-prod
        kubectl rollout history deployment/frontend -n code-quest-prod || echo "No frontend deployment history"
        kubectl rollout history deployment/backend -n code-quest-prod || echo "No backend deployment history"

  # =============================================================================
  # Security Scan Job
  # =============================================================================
  security-scan:
    name: Production Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Notification Job
  # =============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Production deployment successful!"
          echo "🚀 Application is now live in production"
        else
          echo "❌ Production deployment failed!"
          echo "🔍 Check the logs for more details"
        fi

